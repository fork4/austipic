package org.austipic.service;

import java.io.IOException;
import java.net.UnknownHostException;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.austipic.exception.StoryNotFoundException;
import org.austipic.story.Story;

import com.mongodb.MongoClient;

/**
 * Servlet implementation class StoryFetcherServlet
 */
@WebServlet("/fetch")
public final class StoryFetcherServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	
	private static final String STORY_NOT_FOUND = 
			"<? xml version=\"1.0\" encoding=\"utf-8\" ?>" +
			"<story><title>Story not found.</title></story>";
	
	MongoClient mongoClient;
	
    @Override
	public void init() throws ServletException {
		super.init();

		try {
			mongoClient = new MongoClient(getServletContext().getInitParameter("db-host"));
		} catch (UnknownHostException e) {
			throw new ServletException("Unable to connect to database at ");
		}   
	}

	/**
     * @see HttpServlet#HttpServlet()
     */
    public StoryFetcherServlet() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		response.setContentType("text/xml");
		response.getWriter().println(processRequest(request));
		response.flushBuffer();
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		response.setContentType("text/xml");
		response.getWriter().println(processRequest(request));
		response.flushBuffer();
	}
	
	protected String processRequest(HttpServletRequest request) {
		String storyId = request.getParameter("story");
		
		if(storyId != null) {
			try {
				Story myStory = Story.load(storyId);
				
				return myStory.toXml();
			} catch (StoryNotFoundException e) {
				return STORY_NOT_FOUND;
			}
		}

		return STORY_NOT_FOUND;
	}
	

}
